{"version":3,"sources":["ShowTime.js","Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","Request.js","index.js"],"names":["Component","Todoinput","handleInput","e","keyCode","props","addTodo","target","value","handleChange","setState","name","state","n1","n2","htmlFor","style","color","fontSize","id","onChange","this","onKeyDown","type","parseInt","Todoing","a","className","todo","map","item","idx","key","onClick","num","click","defaultProps","Request","data","fetch","method","body","then","res","json","result","console","log","index","album_title","author","ReactDOM","render","document","getElementById"],"mappings":"kNAGsCA,Y,eCiCjBC,G,mBACjB,aAAc,IAAD,8BACT,+CAMJC,YAAc,SAACC,GACM,KAAdA,EAAEC,SACD,EAAKC,MAAMC,QAAQH,EAAEI,OAAOC,QATvB,EAYbC,aAAe,SAACN,GACZ,EAAKO,SAAL,eACKP,EAAEI,OAAOI,KAAQR,EAAEI,OAAOC,SAZ/B,EAAKI,MAAS,CACVC,GAAK,EACLC,GAAK,GAJA,E,sEAiBH,IAAD,OACL,OACI,6BACI,2BAAOC,QAAQ,MAAMC,MAAO,CAACC,MAAM,MAAMC,SAAS,KAAlD,sBACA,2BAAOC,GAAG,MAAMR,KAAK,KAAKS,SAAU,SAACjB,GAAD,OAAK,EAAKM,aAAaN,IAAIK,MAAOa,KAAKT,MAAMC,GAAIS,UAAa,SAACnB,GAAD,OAAK,EAAKD,YAAYC,IAAIoB,KAAO,SAFvI,IAII,2BAAOZ,KAAK,KAAKS,SAAU,SAACjB,GAAD,OAAK,EAAKM,aAAaN,IAAIK,MAAOa,KAAKT,MAAME,GAAIQ,UAAa,SAACnB,GAAD,OAAK,EAAKD,YAAYC,IAAIoB,KAAO,SAC1H,2BAAIC,SAASH,KAAKT,MAAMC,IAAIW,SAASH,KAAKT,MAAME,KAChD,qD,GA1BuBd,cCjClByB,E,iLACP,IAAD,OACL,OACI,6BACI,uDAASJ,KAAKhB,MAAMqB,GACpB,wBAAIC,UAAU,IACVN,KAAKhB,MAAMuB,KAAKC,KAAI,SAACC,EAAKC,GAAN,OAAa,wBAAIC,IAAKD,EAAID,GAAOA,EAApB,OAA6B,4BAAQG,QAAS,SAACC,GAAD,OAAO,EAAK7B,MAAM8B,MAAMJ,KAAzC,0B,GAN7C/B,aAiBrCyB,EAAQW,aAAe,CACnBR,KAAO,CAAC,EAAE,EAAE,GACZF,EAAE,KClBgC1B,Y,WCAjBqC,E,YACjB,aAAc,IAAD,8BACT,+CACKzB,MAAQ,CACT0B,KAAM,IAHD,E,iFAMO,IAAD,OACfC,MAAM,sDAAsD,CACxDC,OAAO,OAAOC,KAAK,gBACpBC,MAAK,SAACC,GACL,OAAOA,EAAIC,UAEZF,MAAK,SAACC,GACD,EAAKjC,SAAS,CACV4B,KAAMK,EAAIE,SAElBC,QAAQC,IAAIJ,Q,+BAShB,OACI,6BACI,wDACA,4BAEQtB,KAAKT,MAAM0B,KAAKT,KACZ,SAACC,EAAKkB,GAAN,OACI,wBAAIhB,IAAMgB,GACN,4BAAKlB,EAAKmB,aACV,2BAAInB,EAAKoB,kB,GAnCRlD,aCSrCmD,IAASC,OACL,kBAAC,EAAD,MAAWC,SAASC,eAAe,U","file":"static/js/main.60f61e92.chunk.js","sourcesContent":["import React,{Component,Fragment} from 'react';\r\n\r\n//类定义组件\r\nexport default class ShowTime extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            time:new Date().toLocaleTimeString()\r\n        }\r\n        //自己写的函数需要用this进行绑定\r\n        // this.handleClick = this.handleClick.bind(this);\r\n        console.log('constructor',this.props.word);\r\n    }\r\n    componentDidMount(){\r\n        console.log('componentDidMount');\r\n        setTimeout(()=>{\r\n            console.log('1');\r\n            this.setState({\r\n                time:new Date().toLocaleTimeString()\r\n            })\r\n        },1000)\r\n    }\r\n    shouldComponentUpdate(){\r\n        return true\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log('getsnapshot');\r\n        return ''\r\n    }\r\n    componentDidUpdate(){\r\n        console.log('didupdate');\r\n    }\r\n    handleClick = (num,e)=>{//自己声明的方法\r\n        console.log(num,e);\r\n        console.log('点击成功');\r\n    }\r\n    divClick(num,e){\r\n        console.log(num,e);\r\n        console.log('点击成功');\r\n    }\r\n    render(){\r\n        console.log('render');\r\n        return (\r\n            <Fragment>\r\n                {/* <div onClick = {this.handleClick(1,this)}>{this.state.time}</div> */}\r\n                <div onClick = {(ev) => this.handleClick(1,ev)}>{this.state.time}</div>\r\n                <div onClick ={this.divClick.bind(this,333)}>hello{this.props.word}</div>\r\n            </Fragment>\r\n        )\r\n\r\n    }\r\n}\r\n//默认导出，只能导出一次 \r\n// export default ShowTime;\r\n//命名导出，可写多个，{可以多个，..，}\r\n// export {ShowTime}; //引入import {ShowTime} from './class1';","import React, { Component } from 'react'\r\nimport { directive } from '@babel/types'\r\n\r\n/**\r\n * 父子组件交互\r\n * 子组件 --> 父组件，调用子组件时往子组件传递一个函数，通过props调用该函数即可传递该内容\r\n * 父组件 --> 子组件，传属性\r\n */\r\n\r\n// 受控组件和非受控组件\r\n\r\n//非受控组件：\r\n//代码简单、比较适用于一次性获取表单的值\r\n// export default class Todoinput extends Component{\r\n//     componentDidMount(){//在render后执行\r\n//         console.log(this.inp);\r\n//         console.log(this.refs);\r\n//     }\r\n//     search =() =>{\r\n//         console.log(this.inp.value);\r\n//     }\r\n//     render(){\r\n//         return (\r\n//             <div>\r\n//                 {/* ref:箭头函数返回自身节点传给实例的属性*/}\r\n//                 <input type = \"text\" ref={(inp)=>this.inp = inp}></input>\r\n//                 <button onClick = {this.search}>\r\n//                     查询\r\n//                 </button>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// 受控组件：value值被react的状态state控制---表单元素\r\n// 实时获取或处理输入框的值\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state =  {\r\n            n1 : 0,\r\n            n2 : 0\r\n        }\r\n    }\r\n    handleInput = (e) =>{\r\n        if(e.keyCode === 13){\r\n            this.props.addTodo(e.target.value);\r\n        }\r\n    }\r\n    handleChange = (e) =>{\r\n        this.setState({\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <label htmlFor=\"inp\" style={{color:'red',fontSize:24}}>输入：</label>\r\n                <input id=\"inp\" name=\"n1\" onChange={(e)=>this.handleChange(e)} value={this.state.n1} onKeyDown = {(e)=>this.handleInput(e)} type = \"text\"/>\r\n                +\r\n                <input name=\"n2\" onChange={(e)=>this.handleChange(e)} value={this.state.n2} onKeyDown = {(e)=>this.handleInput(e)} type = \"text\"/>\r\n                <p>{parseInt(this.state.n1)+parseInt(this.state.n2)}</p>\r\n                <button>查询</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Todoing extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>正在进行{this.props.a}</h1>\r\n                <ul className=\"\">{ \r\n                    this.props.todo.map((item,idx) =><li key={idx+item}>{item}----<button onClick={(num)=>this.props.click(idx)}>删除</button></li>)\r\n                }</ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//类型检查\r\nTodoing.propTypes = {\r\n    todo : PropTypes.string\r\n}\r\nTodoing.defaultProps = {\r\n    todo : [2,3,4],\r\n    a:100\r\n}","import React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo : [1,2,3]\r\n        }\r\n\r\n        //对象如何进行拷贝\r\n        var a = {a:100};\r\n        var b = {b:200};\r\n        // var o = Object.assign(a,b);//将b加入a，并返回a\r\n        var o = Object.assign({},a,b);//新对象\r\n        // console.log(o === a);\r\n\r\n        //遍历数组，尽量不用 for in\r\n        //Object.keys返回由属性名组成的一个数组\r\n        Object.keys(o).forEach((item)=>{\r\n            console.log(item);\r\n            console.log(o[item]);\r\n            \r\n        })\r\n    }\r\n    addItem = (msg)=>{\r\n        // this.state.todo.push(msg);\r\n        // console.log(this.state.todo);\r\n        this.setState({\r\n            todo : [...this.state.todo,msg]\r\n        })\r\n        console.log(msg);\r\n        \r\n    }\r\n    delet = (num)=>{\r\n        //this.state.todo.splice(num,1);不要写\r\n        //深拷贝、浅拷贝\r\n        //状态（state）：\r\n        //1、不要直接改变、处理状态\r\n        var todo =[...this.state.todo];\r\n        todo.splice(num,1);\r\n        //2、setState是异步的\r\n        //(state:上一个状态,props)\r\n        //this.setState((state,props)=>{todo:state.todo+1});\r\n        this.setState({\r\n            todo:todo\r\n        })\r\n        console.log(num);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput addTodo = {this.addItem}/>\r\n                <Todoing todo = {this.state.todo} click = {this.delet}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Axios from 'axios'\r\n\r\n\r\nexport default class Request extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            data: []\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://api.apiopen.top/musicRankingsDetails?type=1',{\r\n            method:'POST',body:'{name:ming}'\r\n        }).then((res) => {\r\n            return res.json();\r\n          })\r\n          .then((res)=>{\r\n                this.setState({\r\n                    data :res.result\r\n                })\r\n            console.log(res);\r\n          })\r\n        // Axios.get('https://api.apiopen.top/musicRankingsDetails?type=1').then((res)=>{\r\n        //     this.setState({\r\n        //         data :res.data.result\r\n        //     })\r\n        // })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>请求接口</h1>\r\n                <ul>\r\n                    {\r\n                        this.state.data.map(\r\n                            (item,index)=>(\r\n                                <li key ={index}>\r\n                                    <h2>{item.album_title}</h2>\r\n                                    <p>{item.author}</p>\r\n                                </li>\r\n                            )\r\n                        )\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React,{Component,Fragment} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ShowTime from './ShowTime';\nimport Todolist from './Todolist/Todolist'\nimport Request from './Request'\n\n\n\n\n//组件交互\n//父组件 --> 子组件：调用时在子组件上添加属性\n//在子组件中通过props获取数据\nReactDOM.render(\n    <Request/>,document.getElementById('root')\n);\n\n//ShowTime.js\n// ReactDOM.render(\n//     <ShowTime/>,document.getElementById('root')\n// );\n\n//函数定义组件及调用（无生命周期函数）\n//当只是渲染结构时\n// function Hello(props){\n//     return (\n//     <div>\n//         {/*条件渲染*/}\n//         {props.list.length>=6?<h1>todo</h1>:''}\n//         {props.list.length>=5 && <h1>todo</h1>}\n//         <ul>\n//             {/*循环渲染*/}\n//             {\n//                 props.list.map((item,index) => index % 2 === 0 && <li key={item}>{item}</li>)\n//             }\n//         </ul>\n//     </div>)\n// }\n// var item = [1,2,3,4,5];\n// ReactDOM.render(\n//     <Hello list={item}/>,document.getElementById('root')\n// );\n\n//react元素创建后不可改变\n// function tick(){\n//     const time = <div>{new Date().toLocaleTimeString()}</div>;\n//     ReactDOM.render(time,document.getElementById('root'));\n// }\n// setInterval(tick,1000);\n\n//以后使用\n// var e = <h1>hello</h1>\n// ReactDOM.render(e,document.getElementById('root'));\n\n//jsx表达式会被react转换成一个对象\n// var ele = React.createElement('div',{'id':'box'},'hello',React.createElement('h1',{'id':'h'},'react'));\n// console.log(ele);\n// var obj = {\n//     type :'div',\n//     props:{\n//         id:'box',\n//         children:['hello',{\n//             type :'h1',\n//             props:{\n//                 id:'h',\n//                 class:'h',\n//                 children:['react']\n//             }\n//         }]\n//     }\n// }\n\n//自己声明rander函数，实现页面渲染\n// function rander(obj,root){\n//     var {type,props} = obj;\n\n//     //文档碎片 - 优化形式\n//     var fr = document.createDocumentFragment();\n\n//     var ele = document.createElement(type);\n//     for(var item in obj.props){\n//         if(item === 'class'){\n//             ele.className = props[item];\n//         }else if(item === 'children'){\n//             for(var i = 0;i < props[item].length;i++){\n//                 if(typeof props[item][i] === 'object'){\n//                     rander(props[item][i],ele);\n//                 }else{\n//                     var txt = document.createTextNode(props[item][i]);\n//                     ele.appendChild(txt);\n//                 } \n//             }\n//         }else{\n//             ele[item] = props[item];\n//         }\n//     }\n//     fr.appendChild(ele);//碎片\n//     root.appendChild(fr);\n// }\n// rander(obj, document.getElementById('root'));\n\n\n\n//注意以下性能问题及优化方法\n\n// 加载html文件、浏览器解析html生成DOM树\n// link加载CSS文件、解析CSS规则、和DOM树生成render tree（渲染树）、浏览器的渲染引擎渲染render tree\n\n/**回流一定重绘，重绘不一定回流\n * \n * 页面回流(重排):内容改变/大小改变/结构改变\n * 页面重绘：样式更改/字体颜色背景颜色等 \n*/\n\n//1、node.offsetLeft、node.offsetWidth等慎用\n//   调用也会产生回流\n// var rt = document.getElementById('root');\n// var width = rt.offsetWidth;\n// setInterval(function(){\n//     width += 1;\n//     rt.style.width = width +'px';\n// },100);\n\n//2、声明一个css的一个类 [声明类 减少回流次数]\n// display、width、height、font-size等会引起页面回流\n// document.body.style.width = '100px';\n// document.body.style.height = '100px';\n// 声明一个css的一个类\n// .change{\n//      width: 100px;\n//      height: 100px;\n//  }\n// document.body.className = 'change';\n\n// 3、对节点的操作先用变量代替\n// console.time('a');\n// var str = '';\n// for(var i=0;i<1000;i++){\n//     str += '<li>'+i+'</li>';\n// }\n// document.body.innerHTML = str;\n// console.timeEnd('a');\n\n// 4、文档碎片的概念"],"sourceRoot":""}